#.(ql:quickload '(cl-glfw cl-opengl cl-glu))

(declaim (optimize (debug 3) (speed 1) (safety 3)))

(defpackage :g
  (:use :cl :gl))

(in-package :g)

(defun draw ()
  (clear :color-buffer-bit)
  (load-identity)
  (translate 0 0 -5)
  (rotate (* 10 (float (glfw:get-time) 0.0)) 1 1 0)
  (rotate (* 90 (float (glfw:get-time) 0.0)) 0 0 1)
  (begin :triangles)
  (color 1 0 0) (vertex  1  0 0)
  (color 0 1 0) (vertex -1  1 0)
  (color 0 0 1) (vertex -1 -1 0)
  (end)
  (let* ((n 1)
	 (path (%gl:gen-paths-nv n))
	 (heart "M300 300 C 100 400,100 200,300 100,500 200,500 400,300 300Z"))
    (cffi:with-foreign-string (s heart)
     (%gl:path-string-nv path :path-format-svg-nv (length heart)
			 s))
    (clear-stencil 0)
    (clear-color 0 0 0 0)
    (stencil-mask #xffffffff)
    (clear :color-buffer-bit :stencil-buffer-bit)
    (%gl:matrix-load-identity-ext :projection)
    (%gl:matrix-load-identity-ext :modelview)
    (%gl:matrix-ortho-ext :modelview 0 1200 0 900 -1 1)
    (%gl:stencil-fill-path-nv path :count-up-nv #x1f)
    (enable :stencil-test)
    (stencil-func :notequal 0 #x1f)
    (stencil-op :keep :keep :zero)
    (color 1 1 0)
    (%gl:cover-fill-path-nv path :bounding-box-nv)
    (%gl:delete-paths-nv path n)))
#+nil
(glfw:do-window (:title "A Simple cl-opengl Example")
    ((matrix-mode :projection)
     (load-identity)
     (unwind-protect (glu:perspective 45 4/3 0.1 50)
       (matrix-mode :modelview)))
  (when (eql (glfw:get-key glfw:+key-esc+) glfw:+press+)
    (return-from glfw::do-open-window))
  (draw))
